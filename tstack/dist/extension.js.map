{"version":3,"file":"extension.js","mappings":"23BA8PA,oBAAyBA,GACxB,MAAMC,EAAkB,IAAIC,EAAoBF,EAAQG,cAExDH,EAAQI,cAAcC,KACrBC,EAAOC,OAAOC,4BAA4BN,EAAoBO,SAAUR,IAGzES,QAAQC,IAAI,2DAKZ,MAAMC,EAAaN,EAAOO,SAASC,gBAAgB,qBAAqB,KAGvER,EAAOC,OAAOQ,uBAAuB,2BAA2B,IAGjEf,EAAQI,cAAcC,KAAKO,EAC5B,EAGA,wBAA8B,EAlR9B,kBAEA,MAAMV,EAMac,cALXC,gBAA2B,iBAC1BC,MACAC,eAAyB,GAEjC,WAAAC,CACkBJ,GAAA,KAAAA,cAAAA,CACd,CAEG,kBAAAK,CACNC,EACAtB,EACAuB,GAEAC,KAAKN,MAAQI,EAEbA,EAAYG,QAAQC,QAAU,CAC7BC,eAAe,EACfC,mBAAoB,CACnBJ,KAAKR,gBAIPM,EAAYG,QAAQI,KAAOL,KAAKM,kBAGhCR,EAAYG,QAAQM,qBACnBC,IAEO,eADEA,EAAQC,UAEdT,KAAKL,eAAiBa,EAAQE,KAC9BxB,QAAQC,IAAI,kBAAmBa,KAAKL,gBACpCb,EAAOC,OAAOQ,uBAAuB,mBAAmBS,KAAKL,kBAE/D,GAGH,CAEQ,eAAAW,GACP,MAAO,8/KAwMR,CAGO,gBAAAK,GACN,OAAOX,KAAKL,cACb,E,UCzPDiB,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://devcore/./src/extension.ts","webpack://devcore/external commonjs \"vscode\"","webpack://devcore/webpack/bootstrap","webpack://devcore/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\nclass WelcomeViewProvider implements vscode.WebviewViewProvider {\n\tpublic static readonly viewType = 'tstack-welcome';\n\tprivate _view?: vscode.WebviewView;\n\tprivate _submittedText: string = '';  // Variable to store the text\n\n\tconstructor(\n\t\tprivate readonly _extensionUri: vscode.Uri,\n\t) { }\n\n\tpublic resolveWebviewView(\n\t\twebviewView: vscode.WebviewView,\n\t\tcontext: vscode.WebviewViewResolveContext,\n\t\t_token: vscode.CancellationToken,\n\t) {\n\t\tthis._view = webviewView;\n\n\t\twebviewView.webview.options = {\n\t\t\tenableScripts: true,\n\t\t\tlocalResourceRoots: [\n\t\t\t\tthis._extensionUri\n\t\t\t]\n\t\t};\n\n\t\twebviewView.webview.html = this._getHtmlContent();\n\n\t\t// Handle messages from the webview\n\t\twebviewView.webview.onDidReceiveMessage(\n\t\t\tmessage => {\n\t\t\t\tswitch (message.command) {\n\t\t\t\t\tcase 'submitText':\n\t\t\t\t\t\tthis._submittedText = message.text;\n\t\t\t\t\t\tconsole.log('Submitted text:', this._submittedText);\n\t\t\t\t\t\tvscode.window.showInformationMessage(`Text submitted: ${this._submittedText}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate _getHtmlContent() {\n\t\treturn `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Welcome</title>\n  <style>\n    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap');\n\n    /* Root Theme Variables */\n    :root {\n      --bg-color: var(--vscode-editor-background);\n      --text-color: var(--vscode-foreground);\n      --container-bg: var(--vscode-sideBar-background);\n      --border-color: var(--vscode-panel-border);\n      --button-bg: var(--vscode-button-background);\n      --button-hover: var(--vscode-button-hoverBackground);\n      --input-bg: var(--vscode-input-background);\n      --input-text: var(--vscode-input-foreground);\n      --input-border: var(--vscode-input-border);\n      --description-bg: var(--vscode-textBlockQuote-background);\n    }\n\n    /* Dark Mode Variables */\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --bg-color: #121212;\n        --text-color: #e0e0e0;\n        --container-bg: #1e1e1e;\n        --border-color: #333;\n        --button-bg: #0a84ff;\n        --button-hover: #0070d1;\n        --input-bg: #252525;\n        --input-text: #e0e0e0;\n      }\n    }\n\n    /* Base Styles */\n    * {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      font-family: var(--vscode-font-family);\n      transition: all 0.2s ease-in-out;\n    }\n\n    body {\n      display: flex;\n      justify-content: flex-start;\n      align-items: flex-start;\n      padding: 10px;\n      height: 100vh;\n      background: transparent;\n      color: var(--text-color);\n      font-size: var(--vscode-font-size);\n      line-height: 1.4;\n    }\n\n    .container {\n      background: transparent;\n      padding: 10px;\n      text-align: left;\n      width: 100%;\n    }\n\n    h2 {\n      color: var(--vscode-titleBar-activeForeground);\n      font-weight: 600;\n      margin-bottom: 15px;\n      font-size: 1.2em;\n    }\n\n    .description {\n      color: var(--text-color);\n      font-size: 13px;\n      line-height: 1.5;\n      margin-bottom: 20px;\n      padding: 12px;\n      background: var(--description-bg);\n      border-left: 3px solid var(--vscode-textLink-foreground);\n      border-radius: 3px;\n    }\n\n    .description h3 {\n      margin-bottom: 8px;\n      font-size: 14px;\n      color: var(--vscode-titleBar-activeForeground);\n    }\n\n    .description ul {\n      margin-left: 20px;\n      margin-top: 8px;\n    }\n\n    .description li {\n      margin-bottom: 6px;\n    }\n\n    .description strong {\n      color: var(--vscode-textLink-foreground);\n      font-weight: 500;\n    }\n\n    .input-group {\n      display: flex;\n      align-items: center;\n      border: 1px solid var(--input-border);\n      border-radius: 2px;\n      overflow: hidden;\n      background: var(--input-bg);\n      margin-top: 15px;\n    }\n\n    .input-group input {\n      flex: 1;\n      border: none;\n      padding: 8px 10px;\n      font-size: 13px;\n      outline: none;\n      background: var(--input-bg);\n      color: var(--input-text);\n      min-height: 32px;\n      font-family: var(--vscode-font-family);\n    }\n\n    .input-group input::placeholder {\n      color: var(--vscode-input-placeholderForeground);\n    }\n\n    .input-group button {\n      border: none;\n      background: var(--button-bg);\n      color: var(--vscode-button-foreground);\n      padding: 4px 8px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      transition: background 0.2s ease;\n      min-width: 28px;\n      height: 32px;\n    }\n\n    .input-group button:hover {\n      background: var(--button-hover);\n    }\n\n    .input-group button svg {\n      width: 16px;\n      height: 16px;\n      stroke: currentColor;\n    }\n\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h2>Welcome to DevCore!</h2>\n    \n    <div class=\"description\">\n      <h3>How to Use DevCore:</h3>\n      <ul>\n        <li><strong>Describe Your Project:</strong> Enter a brief description of what you want to build (e.g., \"I want to create a social media app for photographers\")</li>\n        <li><strong>Get Recommendations:</strong> DevCore will analyze your needs and suggest the best tech stack</li>\n        <li><strong>Receive Guidance:</strong> Get detailed explanations of why each technology was chosen and how to set them up</li>\n        <li><strong>Best Practices:</strong> Learn about development tools, extensions, and industry best practices for your stack</li>\n      </ul>\n    </div>\n    \n    <form id=\"textForm\">\n      <div class=\"input-group\">\n        <input \n          type=\"text\" \n          id=\"textInput\" \n          placeholder=\"Describe your project idea here...\"\n        />\n        <button type=\"submit\" title=\"Get Recommendations\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M5 12h14M15 6l6 6-6 6\"/>\n          </svg>\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const vscode = acquireVsCodeApi();\n    document.getElementById('textForm').addEventListener('submit', (e) => {\n      e.preventDefault();\n      const text = document.getElementById('textInput').value;\n      vscode.postMessage({\n        command: 'submitText',\n        text: text\n      });\n      document.getElementById('textInput').value = ''; // Clear the input\n    });\n  </script>\n</body>\n</html>\n`;\n\t}\n\n\t// Method to get the stored text\n\tpublic getSubmittedText(): string {\n\t\treturn this._submittedText;\n\t}\n}\n\n// This method is called when your extension is activatedopen cursor\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tconst welcomeProvider = new WelcomeViewProvider(context.extensionUri);\n\t\n\tcontext.subscriptions.push(\n\t\tvscode.window.registerWebviewViewProvider(WelcomeViewProvider.viewType, welcomeProvider)\n\t);\n\n\tconsole.log('Congratulations, your extension \"tstack\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tconst disposable = vscode.commands.registerCommand('tstack.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from tstack!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","welcomeProvider","WelcomeViewProvider","extensionUri","subscriptions","push","vscode","window","registerWebviewViewProvider","viewType","console","log","disposable","commands","registerCommand","showInformationMessage","_extensionUri","static","_view","_submittedText","constructor","resolveWebviewView","webviewView","_token","this","webview","options","enableScripts","localResourceRoots","html","_getHtmlContent","onDidReceiveMessage","message","command","text","getSubmittedText","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}